#!/usr/bin/env python3
import socket
import argparse
import os
from urllib.parse import urlparse
import ssl


def receive(s):
    txt = s.recv(8192).decode()
    print (txt)
    return txt

def get_ip(msg):
    numList = ((msg.split(" "))[4])[1:].split(",")
    ip = numList[0] + '.' + numList[1] + '.' + numList[2] + '.' + numList[3]
    print(ip)
    return ip

def get_port(msg):
    numList = ((msg.split(" "))[4]).split(",")
    lastNum = (numList[5].split(")"))[0]
    portNum = (int(numList[4]) * 256) + int(lastNum)
    print(portNum)
    return portNum

def save(path, content):
    file = open(path, "w")
    file.write(content)
    file.close()

def send(path,tls):
     file = open(path, "rb")
     lines = file.read()
     tls.sendall(lines)
     file.close()


#parse command line arguments
parse = argparse.ArgumentParser()
parse.add_argument('-v', '--verbose', action='store_true')
parse.add_argument('operation', type=str)
parse.add_argument('params', nargs='+')
args = parse.parse_args()

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

#parse url
if len(args.params) > 1:
    if urlparse(args.params[0]).scheme != "ftps":
        url = args.params[1]
    else:
        url = args.params[0]
else:
    url = args.params[0]

print(url)

user = urlparse(url).username
pw = urlparse(url).password
host = urlparse(url).hostname
path = urlparse(url).path

if urlparse(url).port == None:
    port = 21
else:
    port = urlparse(url).port

#initialize socket
s.connect((host, port))
receive(s)

#initialize ssl
tls = "AUTH TLS" + "\r\n"
s.sendall(tls.encode())
receive(s)

context = ssl.create_default_context()
s = context.wrap_socket(s,server_hostname=host)

#user/pw info
user_info = "USER " + user + "\r\n"
pw_info = "PASS " + pw + "\r\n"

s.sendall(user_info.encode())
receive(s)
s.sendall(pw_info.encode())
receive(s)

#communications
s.sendall("PBSZ 0\r\n".encode())
receive(s)
s.sendall("PROT P\r\n".encode())
receive(s)
s.sendall("TYPE I\r\n".encode())
receive(s)
s.sendall("MODE S\r\n".encode())
receive(s)
s.sendall("STRU F\r\n".encode())
receive(s)

#operation messages
mkd_msg = "MKD " + path + "\r\n"
rmdir_msg = "RMD " + path + "\r\n"
list_msg = "LIST " + path + "\r\n"
retr_msg = "RETR " + path + "\r\n"
stor_msg = "STOR " + path + "\r\n"
dele_msg = "DELE " + path + "\r\n"

#make a directory
if (args.operation == "mkdir"):
    s.sendall(mkd_msg.encode())
    receive(s)
#remove a file
elif (args.operation == "rm"):
    s.sendall(dele_msg.encode())
    receive(s)
#make a directory
elif (args.operation == "rmdir"):
    s.sendall(rmdir_msg.encode())
    receive(s)
#list all files
elif (args.operation == "ls"):
    s.sendall("PASV\r\n".encode())
    res = receive(s)
    ip = get_ip(res)
    port = get_port(res)

    #open tls data channel
    c = socket.create_connection((ip, port))
    s.sendall(list_msg.encode())
    receive(s)
    context = ssl.create_default_context()
    tls = context.wrap_socket(c, server_hostname=host)
    receive(tls)
    tls.close()

#copy file
elif (args.operation == "cp"):
    s.sendall("PASV\r\n".encode())
    res = receive(s)
    ip = get_ip(res)
    port = get_port(res)

    if ((urlparse(args.params[0]).scheme) == "ftps"):
        s.sendall(retr_msg.encode())
        c = socket.create_connection((ip, port))
        context = ssl.create_default_context()
        tls = context.wrap_socket(c, server_hostname=host)
        save(args.params[1], receive(tls))
        tls.close()

    elif ((urlparse(args.params[0]).scheme) != "ftps"):
        s.sendall((stor_msg.encode()))
        c = socket.create_connection((ip, port))
        context = ssl.create_default_context()
        tls = context.wrap_socket(c, server_hostname=host)
        send(args.params[0],tls)
        tls.close()

#move file
elif (args.operation == "mv"):
    s.sendall("PASV\r\n".encode())
    res = receive(s)
    ip = get_ip(res)
    port = get_port(res)

    if ((urlparse(args.params[0]).scheme) == "ftps"):
        s.sendall(retr_msg.encode())
        c = socket.create_connection((ip, port))
        context = ssl.create_default_context()
        tls = context.wrap_socket(c, server_hostname=host)
        save(args.params[1], receive(tls))
        tls.close()
        s.sendall((dele_msg.encode()))
        receive(s)

    elif ((urlparse(args.params[0]).scheme) != "ftps"):
        s.sendall((stor_msg.encode()))
        c = socket.create_connection((ip, port))
        context = ssl.create_default_context()
        tls = context.wrap_socket(c, server_hostname=host)
        send(args.params[0],tls)
        tls.close()
        os.remove(args.params[0])

s.sendall("QUIT\r\n".encode())
s.close()

